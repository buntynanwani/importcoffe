services:
  db:
    restart: always
    image: postgres:latest
    container_name: ${DB_CONTAINER_NAME}
    volumes:
      - db:/var/lib/postgresql/data
    expose:
      - ${POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - coffe-network
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}"]
      retries: 20
      timeout: 3s
      interval: 2s

  backend:
    restart: always
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: Backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./Backend/code:/Backend/code
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_HOST: ${DB_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      DJANGO_SUPERUSER: ${DJANGO_SUPERUSER}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
    networks:
      - coffe-network

  frontend:
    restart: always
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: Frontend
    ports:
      - "8501:8501"
    volumes:
      - ./Frontend:/Frontend
    depends_on:
      - backend
    environment:
      BACKEND_URL: http://Backend:${BACKEND_PORT}
    networks:
      - coffe-network

volumes:
  db:
    name: db

networks:
  coffe-network:
    driver: bridge
